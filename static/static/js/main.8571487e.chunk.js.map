{"version":3,"sources":["API.ts","components/RoomConfig.tsx","components/Statistics.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_SERVER","window","origin","run_simulation","room","a","request","post","body","json","undefined","defaultConfig","target","output","roomX","roomY","roomZ","interval","fromDate","moment","startOf","add","fromTime","toDate","toTime","location","RoomConfig","onCalculate","disabled","useState","config","setConfig","onClick","useCallback","clone","fD","tT","tD","fromTimestamp","set","year","month","date","unix","toTimestamp","configToDefinition","genPropertyHandler","prop","val","newConfig","genTimePropertyHandler","t","style","maxWidth","className","layout","gutter","span","Item","label","onChange","width","value","placeholder","paddingTop","defaultValue","format","use12Hours","textAlign","e","currentTarget","type","Text","Typography","Statistics","tempData","scheduleData","length","firstOff","slice","find","s","heating","time","stableTempData","filter","map","temp","maxTemp","Math","max","toFixed","minTemp","min","mean","reduce","b","med","arr","mid","floor","nums","sort","median","timeHeating","data","totalTime","lastOn","forEach","totalHeatTime","timeData","split","timeString","kwh","heater","rowStyle","paddingBottom","padding","strong","marginTop","App","setTempData","schedule","setSchedule","calculating","setCalculating","onTestClick","API","results","current_time","init_time","temp_hist","i","outdoor_temp","outdoor_temp_hist","target_temp","control","Content","display","height","stroke","dataKey","name","unit","dot","strokeWidth","angle","tickFormatter","labelFormatter","parseInt","toString","formatter","round","marginLeft","verticalAlign","bodyStyle","defaultActiveKey","TabPane","tab","key","overflowY","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8571487e.chunk.js","sourcesContent":["import request from 'request-promise-native';\r\n\r\nexport interface RoomDefinition {\r\n    A: {\r\n        ROOF?: number\r\n        WALL?: number\r\n        FLOOR?: number\r\n        WINDOW_SINGLE_WOOD?: number\r\n        WINDOW_DOUBLE_ALUMINUM?: number\r\n        WINDOW_DOUBLE_HIGH_PERFORMANCE?: number\r\n    },\r\n    volume: number,\r\n    interval?: number,\r\n    init_temp?: number,\r\n    target_temp: number,\r\n    location?: string\r\n    heater: number,\r\n    from?: number,\r\n    to?: number\r\n};\r\n\r\nexport interface SimulationData {\r\n    control: {\r\n        heating: boolean\r\n        time: number\r\n    }[]\r\n    init_time: number\r\n    interval: number\r\n    outdoor_temp_hist: number[]\r\n    temp_hist: number[]\r\n};\r\n\r\nconst API_SERVER = process.env.NODE_ENV === 'production' ? window.origin : 'http://localhost:8080';\r\n\r\nconst run_simulation = async (room: RoomDefinition): Promise<SimulationData | undefined> => {\r\n    try {\r\n        return await request.post(`${API_SERVER}/api/predict`, {\r\n            body: room,\r\n            json: true\r\n        })\r\n    } catch {\r\n        return undefined\r\n    }\r\n};\r\n\r\nexport default { run_simulation }\r\nexport { run_simulation }","import './RoomConfig.css'\r\nimport React from 'react';\r\nimport { useState, useCallback } from 'react';\r\nimport { RoomDefinition } from '../API';\r\nimport { Moment } from 'moment';\r\nimport moment from 'moment';\r\n\r\nimport { Form, Button, Input, InputNumber, Row, Col, DatePicker, TimePicker, Card } from 'antd';\r\n\r\n\r\ninterface Config {\r\n    target: number\r\n    output: number\r\n    roomX: number\r\n    roomY: number\r\n    roomZ: number\r\n    window: number\r\n    fromDate: Moment\r\n    fromTime: Moment\r\n    toDate: Moment\r\n    toTime: Moment\r\n    interval: number\r\n    location: string\r\n}\r\n\r\nconst defaultConfig: Config = {\r\n    target: 22,\r\n    output: 1000,\r\n    roomX: 8,\r\n    roomY: 10,\r\n    roomZ: 2.75,\r\n    window: 4,\r\n    interval: 20,\r\n    fromDate: moment().startOf('day').add(1, 'd'),\r\n    fromTime: moment().startOf('day').add(20, 'h'),\r\n    toDate: moment().startOf('day').add(2, 'd'),\r\n    toTime: moment().startOf('day').add(8, 'h'),\r\n    location: \"Hamilton\"\r\n}\r\n\r\n\r\nconst configToDefinition = (config: Config): RoomDefinition => {\r\n    const [fT, fD, tT, tD] = [config.fromTime.clone(), config.fromDate.clone(), config.toTime.clone(), config.toDate.clone()]\r\n    const fromTimestamp = fT.set({ year: fD.year(), month: fD.month(), date: fD.date() }).unix();\r\n    const toTimestamp = tT.set({ year: tD.year(), month: tD.month(), date: tD.date() }).unix();\r\n\r\n    return {\r\n        \"A\": {\r\n            \"ROOF\": config.roomX * config.roomY,\r\n            \"WALL\": (2 * config.roomX + 2 * config.roomY) - config.window,\r\n            \"FLOOR\": config.roomX * config.roomY,\r\n            \"WINDOW_SINGLE_WOOD\": config.window\r\n        },\r\n        \"volume\": config.roomX * config.roomY * config.roomZ,\r\n        // \"init_temp\": 18,\r\n        \"interval\": config.interval,\r\n        \"target_temp\": config.target,\r\n        \"location\": config.location,\r\n        \"heater\": config.output,\r\n        \"from\": fromTimestamp,\r\n        \"to\": toTimestamp\r\n    }\r\n}\r\n\r\n\r\ninterface RoomConfigProps {\r\n    onCalculate?(r: RoomDefinition): void,\r\n    disabled?: boolean\r\n}\r\n\r\nconst RoomConfig: React.FC<RoomConfigProps> = ({ onCalculate, disabled }) => {\r\n    const [config, setConfig] = useState<Config>(defaultConfig)\r\n\r\n    const onClick = useCallback(() => {\r\n        if (onCalculate) {\r\n            onCalculate(configToDefinition(config))\r\n        }\r\n    }, [onCalculate, config])\r\n\r\n    const genPropertyHandler = (prop: keyof Config) => {\r\n        return (val: number | undefined) => {\r\n            let newConfig: Config = { ...config };\r\n            (newConfig[prop] as any) = val ? val : 0;\r\n            setConfig(newConfig);\r\n        }\r\n    }\r\n\r\n    const genTimePropertyHandler = (prop: \"fromDate\" | \"fromTime\" | \"toDate\" | \"toTime\") => {\r\n        return (t: Moment | null) => {\r\n            if (t) {\r\n                let newConfig: Config = { ...config }\r\n                newConfig[prop] = t\r\n                setConfig(newConfig)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onLocationChange = (e : React.ChangeEvent<HTMLInputElement>) => {\r\n        setConfig({\r\n            ...config,\r\n            location: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card style={{ maxWidth: '650px' }}>\r\n            <Form className=\"ConfigForm\" layout=\"vertical\">\r\n                <Row gutter={6}>\r\n                    <Col span={12}>\r\n                        <Form.Item label=\"Target Temperature (&deg;C)\">\r\n                            <InputNumber onChange={genPropertyHandler(\"target\")} style={{ width: '100%' }} value={config.target} placeholder=\"0 &deg;C\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item label=\"Heater Output (W)\">\r\n                            <InputNumber onChange={genPropertyHandler(\"output\")} style={{ width: '100%' }} value={config.output} placeholder=\"0 W\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={6}>\r\n                    <Col span={10}>\r\n                        <Form.Item label=\"Room Dimensions (m)\">\r\n                            <Row gutter={3}>\r\n                                <Col span={11}><InputNumber onChange={genPropertyHandler(\"roomX\")} style={{ width: '100%' }} value={config.roomX} placeholder=\"0 m\" /></Col>\r\n                                <Col span={2} style={{ paddingTop: 3 }}>x</Col>\r\n                                <Col span={11}><InputNumber onChange={genPropertyHandler(\"roomY\")} style={{ width: '100%' }} value={config.roomY} placeholder=\"0 m\" /></Col>\r\n                            </Row>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={7}>\r\n                        <Form.Item label=\"Ceiling Height (m)\">\r\n                            <InputNumber onChange={genPropertyHandler(\"roomZ\")} style={{ width: '100%' }} value={config.roomZ} placeholder=\"0 m\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={7}>\r\n                        <Form.Item label=\"Window Area (m&sup2;)\">\r\n                            <InputNumber onChange={genPropertyHandler(\"window\")} style={{ width: '100%' }} value={config.window} placeholder=\"0 m&sup2;\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={6}>\r\n                    <Col span={24}>\r\n                        <Form.Item label=\"Time Range\">\r\n                            <Row gutter={3}>\r\n                                <Col span={5}><DatePicker onChange={genTimePropertyHandler('fromDate')} defaultValue={config.fromDate} /></Col>\r\n                                <Col span={6}><TimePicker onChange={genTimePropertyHandler('fromTime')} defaultValue={config.fromTime} format=\"h:mm a\" use12Hours /></Col>\r\n                                <Col span={2} style={{ paddingTop: 3, textAlign: 'center' }}>to</Col>\r\n                                <Col span={5}><DatePicker onChange={genTimePropertyHandler('toDate')} defaultValue={config.toDate} /></Col>\r\n                                <Col span={6}><TimePicker onChange={genTimePropertyHandler('toTime')} defaultValue={config.toTime} format=\"h:mm a\" use12Hours /></Col>\r\n                            </Row>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={6}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Interval (min)\">\r\n                            <InputNumber onChange={genPropertyHandler(\"interval\")} style={{ width: '100%' }} value={config.interval} placeholder=\"5\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={13}>\r\n                        <Form.Item label=\"Location\">\r\n                            <Input onChange={onLocationChange} value={config.location} placeholder=\"Hamilton, New Zealand\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={5}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" disabled={disabled} onClick={onClick}>{ disabled ? \"Calculating...\" : \"Calculate\" }</Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Card>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default RoomConfig;\r\nexport { RoomConfig };","import React from 'react';\r\n\r\nimport { Row, Col, Typography } from 'antd';\r\nimport moment from 'moment';\r\n\r\nconst { Text } = Typography\r\n\r\nexport interface TempData {\r\n    temp: number,\r\n    outdoor_temp: number,\r\n    heater: number,\r\n    target: number,\r\n    time: number\r\n}\r\n\r\nexport interface ScheduleData {\r\n    heating: boolean,\r\n    time: number,\r\n}\r\n\r\ninterface StatisticsProps {\r\n    tempData: TempData[],\r\n    scheduleData: ScheduleData[]\r\n}\r\n\r\nconst median = (arr: number[]) => {\r\n    const mid = Math.floor(arr.length / 2),\r\n        nums = [...arr].sort((a, b) => a - b);\r\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n};\r\n\r\nconst totalHeatTime = (data: ScheduleData[]) => {\r\n    let totalTime = 0\r\n    let lastOn: ScheduleData | undefined = undefined\r\n    data.forEach(s => {\r\n        if (!s.heating && lastOn) {\r\n            totalTime += s.time - lastOn.time\r\n            lastOn = undefined\r\n        } else if (s.heating) {\r\n            lastOn = s\r\n        }\r\n    });\r\n    return totalTime\r\n}\r\n\r\nconst Statistics: React.FC<StatisticsProps> = ({ tempData, scheduleData }) => {\r\n\r\n    if (tempData.length > 0) {\r\n        const firstOff = scheduleData.slice(1).find(s => !s.heating) || scheduleData[0] || { heating: false, time: tempData[0].time }\r\n        const stableTempData = tempData.filter(t => t.time > firstOff.time).map(t => t.temp)\r\n\r\n        const maxTemp = Math.max(...stableTempData).toFixed(2)\r\n        const minTemp = Math.min(...stableTempData).toFixed(2)\r\n        const mean = (stableTempData.reduce((a, b) => a + b) / stableTempData.length).toFixed(2)\r\n        const med = median(stableTempData).toFixed(2)\r\n\r\n        const timeHeating = totalHeatTime(scheduleData)\r\n        const timeData = moment().startOf('day').add(timeHeating, 'seconds').format(\"H:mm:ss\").split(\":\")\r\n        const timeString = `${timeData[0]}h ${timeData[1]}m`\r\n\r\n        const joules = (timeHeating * tempData[0].heater)\r\n        const kwh = (joules / (3600 * 1000)).toFixed(2)\r\n\r\n        const rowStyle: React.CSSProperties = {\r\n            paddingTop: 5,\r\n            paddingBottom: 5\r\n        }\r\n\r\n        return (<div style={{ padding: 15, textAlign: 'left' }}>\r\n            <Row style={rowStyle}>\r\n                <Col span={12}><Text strong>Target:</Text></Col>\r\n                <Col span={12}><Text>{tempData[0].target.toFixed(2)} &deg;C</Text></Col>\r\n            </Row>\r\n            <Row style={rowStyle}>\r\n                <Col span={12}><Text strong>Range:</Text></Col>\r\n                <Col span={12}><Text>{minTemp} &deg;C - {maxTemp}</Text></Col>\r\n            </Row>\r\n            <Row style={rowStyle}>\r\n                <Col span={12}><Text strong>Mean:</Text></Col>\r\n                <Col span={12}><Text>{mean} &deg;C</Text></Col>\r\n            </Row>\r\n            <Row style={rowStyle}>\r\n                <Col span={12}><Text strong>Median:</Text></Col>\r\n                <Col span={12}><Text>{med} &deg;C</Text></Col>\r\n            </Row>\r\n            <Row style={rowStyle}>\r\n            <Col span={12}><Text strong>Heating Time:</Text></Col>\r\n                <Col span={12}><Text>{timeString}</Text></Col>\r\n            </Row>\r\n            <Row style={rowStyle}>\r\n            <Col span={12}><Text strong>Energy Usage:</Text></Col>\r\n                <Col span={12}><Text>{kwh} kWh</Text></Col>\r\n            </Row>\r\n        </div>)\r\n    } else {\r\n        return (<div style={{ marginTop: 20 }}>\r\n            <Text type=\"secondary\" strong>No data</Text>\r\n        </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default Statistics;\r\nexport { Statistics };","import React from 'react';\nimport moment from 'moment';\nimport { useCallback, useState } from 'react';\nimport './App.css';\n\nimport API from './API';\nimport { RoomDefinition } from './API';\n\nimport { RoomConfig } from './components/RoomConfig'\nimport { Statistics, TempData, ScheduleData } from './components/Statistics'\n\nimport { Layout, Row, Card, List, Tabs, Typography } from 'antd';\n\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Label, Legend } from 'recharts';\n\n\nconst App: React.FC = () => {\n    const [tempData, setTempData] = useState<TempData[]>([]);\n    const [schedule, setSchedule] = useState<ScheduleData[]>([]);\n\n    const [calculating, setCalculating] = useState<boolean>(false);\n\n    const onTestClick = useCallback(async (room: RoomDefinition) => {\n        setCalculating(true);\n        const results = await API.run_simulation(room);\n        setCalculating(false);\n        if (results) {\n            // Set temperature data\n            let current_time = results.init_time;\n            setTempData(results.temp_hist.map((t, i) => {\n                const data = {\n                    temp: t,\n                    outdoor_temp: results.outdoor_temp_hist[i],\n                    heater: room.heater,\n                    target: room.target_temp,\n                    time: current_time\n                };\n                current_time += results.interval\n                return data;\n            }));\n\n            setSchedule(results.control)\n        }\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <Layout>\n                <Layout.Content style={{ padding: 20, textAlign: 'center' }}>\n                    <Row style={{ display: 'inline-block' }}><RoomConfig onCalculate={onTestClick} disabled={calculating} /></Row>\n                    <Row style={{ marginTop: 20 }}>\n                        <div style={{ width: 650, display: 'inline-block' }}>\n                            <Card>\n                                <LineChart width={600} height={400} data={tempData}>\n                                    <Line stroke=\"#ab6832\" dataKey=\"target\" name=\"Target Temperature\" unit=\" &deg;C\" dot={false} />\n                                    <Line stroke=\"#7bb350\" strokeWidth={2} dataKey=\"temp\" name=\"Indoor Temperature\" unit=\" &deg;C\" dot={false} />\n                                    <Line stroke=\"#507bb3\" strokeWidth={2} dataKey=\"outdoor_temp\" name=\"Outdoor Temperature\" unit=\" &deg;C\" dot={false} />\n\n                                    <YAxis>\n                                        <Label value=\"Temperature (&deg;C)\" angle={-90} />\n                                    </YAxis>\n                                    <XAxis tickFormatter={t => moment.unix(t).format(\"LT\")} dataKey=\"time\" />\n                                    <Tooltip labelFormatter={s => moment.unix(parseInt(s.toString())).format(\"ddd LT\")} formatter={(value) => (typeof value === 'number') ? Math.round(value * 100) / 100 : value} />\n                                    <Legend />\n                                </LineChart>\n                            </Card>\n                        </div>\n                        <div style={{ marginLeft: 20, width: 250, display: 'inline-block', verticalAlign: 'top' }}>\n                            <Card style={{ height: 450 }} bodyStyle={{ padding: 0, height: '100%' }}>\n                                <Tabs defaultActiveKey=\"1\" style={{ display: 'block', height: '100%' }}>\n                                    <Tabs.TabPane tab=\"Statistics\" key=\"1\" style={{ height: '100%', overflowY: 'auto' }}>\n                                        <Statistics tempData={tempData} scheduleData={schedule} />\n                                    </Tabs.TabPane>\n                                    <Tabs.TabPane tab=\"Schedule\" key=\"2\" style={{ height: '100%', overflowY: 'auto' }}>\n                                        {schedule.length > 0 ? <List>\n                                            {schedule.slice(1).map((s, i) => <List.Item key={i}>\n                                                <Typography.Text strong>{s.heating ? \"On\" : \"Off\"}</Typography.Text> - {moment.unix(s.time).format(\"ddd LT\")}\n                                            </List.Item>)}\n                                        </List> :\n                                        <div style={{ marginTop: 20 }}>\n                                            <Typography.Text type=\"secondary\" strong>No data</Typography.Text>\n                                        </div>}\n                                    </Tabs.TabPane>\n                                </Tabs>\n                            </Card>\n                        </div>\n\n\n                    </Row>\n\n                </Layout.Content>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}